---
- name: make sure fontconfig and unzip are installed
  package:
    name: '{{ item }}'
    state: present
  become: '{{ fonts_become_to_install_packages }}'
  loop:
    - fontconfig
    - unzip

- name: create directory for fonts if it does not exist
  file:
    path: '{{ fonts_directory }}'
    state: directory

- name: download font archives
  get_url:
    url: '{{ item }}'
    dest: '/tmp/{{ item | basename }}'
  register: fonts_download_result
  loop: '{{ fonts_download_urls }}'

- name: create directories to store fonts
  file:
    path: '{{ fonts_directory }}/{{ (item | basename).rstrip(".zip") }}'
    state: directory
  loop: '{{ fonts_download_urls }}'

- name: unarchive fonts to {{ fonts_directory }}
  unarchive:
    src: '{{ item }}'
    dest: '{{ fonts_directory }}/{{ (item | basename).rstrip(".zip") }}'
    remote_src: true
    exclude:
      - '* Mono*'
      - '*Windows*'
      - '*.otf'
      - '*Narrow*'
  loop: '{{ fonts_download_result.results | map(attribute="dest") | list }}'
  notify: update font cache
  when:  fonts_download_result is changed

- name: find files other than .ttf in fonts directory
  find:
    paths: '{{ fonts_directory }}'
    recurse: true
    excludes: '*.ttf,.uuid'
    file_type: file
  register: fonts_directory_not_ttf_result

- name: find Term and Windows font variants
  find:
    paths: '{{ fonts_directory }}'
    recurse: true
    patterns: '* Mono*,* Term *,* Windows *'
    file_type: file
  register: fonts_directory_win_term_result

- name: remove found non-ttf, windows and term variants
  file:
    path: '{{ item.path }}'
    state: absent
  loop: '{{ fonts_directory_not_ttf_result.files | union(fonts_directory_win_term_result.files) }}'
  notify: update font cache

- name: configure displaying of fonts
  file:
    src: '/etc/fonts/conf.avail/{{ item }}'
    dest: '/etc/fonts/conf.d/{{ item }}'
    state: link
  become: true
  loop: '{{ fonts_fontconfig_enable_presets }}'
  when: link_font_configs | default(false)
