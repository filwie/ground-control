# vi: set ft=ruby :

VAGRANT_API_VERSION = "2"
VAGRANT_BOX = "archlinux/archlinux"
VAGRANT_HOSTNAME = "arch"

ANSIBLE_DIRECTORY = "../ansible"
ANSIBLE_PLAYBOOK = ANSIBLE_DIRECTORY + "/provision.yaml"
ANSIBLE_GROUP = "vagrant"
ANSIBLE_AS_ROOT = false

$script = <<-SCRIPT
  sed -i 's/^#DNS=.*$/DNS=1.1.1.1/' /etc/systemd/resolved.conf
  systemctl restart systemd-resolved
  command -v python &> /dev/null || pacman -Sy --needed --noconfirm python
SCRIPT

Vagrant.configure(VAGRANT_API_VERSION) do |config|
  config.vm.box = VAGRANT_BOX
  config.vm.hostname = VAGRANT_HOSTNAME
  config.vm.network "private_network", ip: "192.168.33.33"

  # config.vm.synced_folder "../data", "/data"

  config.vm.provider :virtualbox do |vbox|
    vbox.name = VAGRANT_HOSTNAME
    vbox.gui = false
    vbox.memory = 4048
    vbox.cpus = 2
    vbox.customize ["modifyvm", :id, "--vram", 64]
    vbox.customize ["modifyvm", :id, "--accelerate3d", "on"]
  end

  # no python equals no Ansible
  config.vm.provision "shell", inline: $script

  config.vm.provision "ansible" do |ansible|
    ansible.become = ANSIBLE_AS_ROOT
    ansible.compatibility_mode = "2.0"
    ansible.config_file = ANSIBLE_DIRECTORY + "/ansible.cfg"
    ansible.extra_vars = {}
    ansible.groups = { "arch" => [VAGRANT_HOSTNAME] }
    ansible.playbook = ANSIBLE_PLAYBOOK
    ansible.verbose = true
  end
end
