# vi: set ft=ruby :

VAGRANT_API_VERSION = "2"
VAGRANT_BOX = "archlinux/archlinux"
VAGRANT_HOSTNAME = "arch"

ANSIBLE_DIRECTORY = "../ansible"
ANSIBLE_PLAYBOOK = ANSIBLE_DIRECTORY + "/provision.yaml"
ANSIBLE_GROUP = "vagrant"
ANSIBLE_AS_ROOT = false

CPUS = 2
MEMORY = 4048
VRAM = 64

$script = <<-SCRIPT
  sed -i 's/^#DNS=.*$/DNS=1.1.1.1/' /etc/systemd/resolved.conf
  systemctl restart systemd-resolved
  echo 'Server = https://ftp.icm.edu.pl/pub/Linux/dist/archlinux/$repo/os/$arch' > /etc/pacman.d/mirrorlist
  [[ -f /gpg_recreate_timestamp ]] || {
    rm -rf /etc/pacman.d/gnupg
    pacman-key --init
    pacman-key --populate archlinux
  } && echo "$(date)" > /gpg_recreate_timestamp
  command -v python &> /dev/null || pacman -Sy --needed --noconfirm python
SCRIPT

Vagrant.configure(VAGRANT_API_VERSION) do |config|
  config.vm.box = VAGRANT_BOX
  config.vm.hostname = VAGRANT_HOSTNAME

  config.vm.provider :virtualbox do |vbox|
    vbox.name = VAGRANT_HOSTNAME
    vbox.gui = false
    vbox.memory = MEMORY
    vbox.cpus = CPUS
    vbox.customize ["modifyvm", :id, "--vram", VRAM]
    vbox.customize ["modifyvm", :id, "--accelerate3d", "on"]
    vbox.customize ['modifyvm', :id, '--clipboard', 'bidirectional']
  end

  config.vm.provider :libvirt do |lvirt|
    lvirt.driver = "kvm"
    lvirt.memory = MEMORY
    lvirt.cpus = CPUS
    lvirt.video_type = "vga"
    lvirt.video_vram = VRAM * 1024
    lvirt.connect_via_ssh = false
    lvirt.management_network_name = "vagrant"
    lvirt.management_network_address = "10.10.10.0/24"
  end

  # no python equals no Ansible
  config.vm.provision "shell", inline: $script

  config.vm.provision "ansible" do |ansible|
    ansible.become = ANSIBLE_AS_ROOT
    ansible.compatibility_mode = "2.0"
    ansible.config_file = ANSIBLE_DIRECTORY + "/ansible.cfg"
    ansible.extra_vars = {}
    ansible.groups = { "arch" => [VAGRANT_HOSTNAME] }
    ansible.playbook = ANSIBLE_PLAYBOOK
    ansible.verbose = true
    ansible.skip_tags = "kvm"
  end
end
